<?xml version="1.0" encoding="utf-8" ?>
<ContentPage
    x:Class="XamarinForms.C_Images.A_Downloaded_Images"
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:d="http://xamarin.com/schemas/2014/forms/design"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Padding="10"
    BackgroundColor="Red"
    mc:Ignorable="d">
    <!--
        Images can be shared across platforms with Xamarin.Forms,
        they can be loaded specifically for each platform, or they can be downloaded for display.
        
        Images are a crucial part of application navigation, usability, and branding.
        Xamarin.Forms applications need to be able to share images across all platforms,
        but also potentially display different images on each platform.
        
        Platform-specific images are also required for icons and splash screens;
        these need to be configured on a per-platform basis.
        
        Display images
        Xamarin.Forms uses the Image view to display images on a page. It has two important properties:
        
        Source - An ImageSource instance, either File, Uri or Resource, which sets the image to display.
        Aspect - How to size the image within the bounds it is being displayed within (whether to stretch, crop or letterbox).
        ImageSource instances can be obtained using static methods for each type of image source:
        
        FromFile - Requires a filename or filepath that can be resolved on each platform.
        FromUri - Requires a Uri object, eg. new Uri("http://server.com/image.jpg") .
        FromResource - Requires a resource identifier to an image file embedded in the application or
        .NET Standard library project, with a Build Action:EmbeddedResource.
        FromStream - Requires a stream that supplies image data.
        
        The Aspect property determines how the image will be scaled to fit the display area:
        
        > Fill - Stretches the image to completely and exactly fill the display area. This may result in the image being distorted.
        > AspectFill - Clips the image so that it fills the display area while preserving the aspect (ie. no distortion).
        > AspectFit - Letterboxes the image (if required) so that the entire image fits into the display area, with blank
        space added to the top/bottom or sides depending on whether the image is wide or tall.
        Images can be loaded from a local file, an embedded resource, downloaded, or loaded from a stream.
        In addition, font icons can be displayed by the Image view by specifying the font icon data in a FontImageSource object. For more information, see Display font icons in the Fonts guide.
        
        Local images
        Image files can be added to each application project and referenced from Xamarin.Forms shared code.
        This method of distributing images is required when images are platform-specific, such as when using
        different resolutions on different platforms, or slightly different designs.
        
        To use a single image across all apps, the same filename must be used on every platform, and it should
        be a valid Android resource name (ie. only lowercase letters, numerals, the underscore, and the period are allowed).
        
        > iOS - The preferred way to manage and support images since iOS 9 is to use Asset Catalog Image Sets, which
        should contain all of the versions of an image that are necessary to support various devices and scale factors
        for an application. For more information, see Adding Images to an Asset Catalog Image Set.
        > Android - Place images in the Resources/drawable directory with Build Action: AndroidResource.
        High- and low-DPI versions of an image can also be supplied (in appropriately named Resources subdirectories
        such as drawable-ldpi, drawable-hdpi, and drawable-xhdpi).
        > Universal Windows Platform (UWP) - Place images in the application's root directory with Build Action: Content.
        
        https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/images?tabs=windows
    -->

    <AbsoluteLayout>
        <Image
            x:Name="MicrosoftImage"
            AbsoluteLayout.LayoutBounds="0, 0, 1, 0.320"
            AbsoluteLayout.LayoutFlags="All"
            BackgroundColor="PaleVioletRed" />
        <Image
            x:Name="ImageURLCode"
            AbsoluteLayout.LayoutBounds="0, 0.5, 1, 0.320"
            AbsoluteLayout.LayoutFlags="All"
            BackgroundColor="PaleVioletRed" />
        <Image
            x:Name="ImageURLCode1"
            AbsoluteLayout.LayoutBounds="0, 1, 1, 0.320"
            AbsoluteLayout.LayoutFlags="All"
            BackgroundColor="PaleVioletRed" />
    </AbsoluteLayout>

</ContentPage>