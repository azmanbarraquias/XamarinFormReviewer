<?xml version="1.0" encoding="utf-8" ?>
<ContentPage
    x:Class="XamarinForms.H_MVVM.A_WhatIsMVVM"
    xmlns="http://xamarin.com/schemas/2014/forms"
    xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
    xmlns:d="http://xamarin.com/schemas/2014/forms/design"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    mc:Ignorable="d">

    <!--
        The Model-View-ViewModel Pattern
        
        The Xamarin.Forms developer experience typically involves creating a user interface in XAML,
        and then adding code-behind that operates on the user interface. As apps are modified,
        and grow in size and scope, complex maintenance issues can arise.
        
        These issues include the tight coupling between the UI controls and the business logic,
        which increases the cost of making UI modifications, and the difficulty of unit testing such code.
        
        The Model-View-ViewModel (MVVM) pattern helps to cleanly separate the business and presentation
        logic of an application from its user interface (UI). Maintaining a clean separation between
        application logic and the UI helps to address numerous development issues and can make an
        application easier to test, maintain, and evolve. It can also greatly improve code re-use
        opportunities and allows developers and UI designers to more easily collaborate when
        developing their respective parts of an app.
        
        https://www.google.com/search?q=xamarin+mvvm&oq=xamarin+mvvm&aqs=chrome..69i57j0l5j69i65j69i60.1871j0j7&sourceid=chrome&ie=UTF-8
    -->

    <WebView Source="https://docs.microsoft.com/en-us/xamarin/xamarin-forms/enterprise-application-patterns/mvvm" />

</ContentPage>